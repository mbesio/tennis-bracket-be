// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(uuid())
  isAdmin     Boolean      @default(false)
  displayName String
  photo       String?
  email       String?
  predictions Prediction[]
  scores      Score[]
  ranking     Ranking[]
}

model Tournament {
  id             String           @id @default(uuid())
  name           String           @unique
  logo           String
  TournamentYear TournamentYear[]
}

model TournamentYear {
  id                        String       @id @default(uuid())
  year                      Int
  startDate                 DateTime
  isDrawOut                 Boolean      @default(false)
  isPredictionClosed        Boolean      @default(false)
  playersFirstQuarter       String[]     @default([])
  playersSecondQuarter      String[]     @default([])
  playersThirdQuarter       String[]     @default([])
  playersFourthQuarter      String[]     @default([])
  semifinalistFirstQuarter  String?
  semifinalistSecondQuarter String?
  semifinalistThirdQuarter  String?
  semifinalistFourthQuarter String?
  finalistTopHalf           String?
  finalistBottomHalf        String?
  winner                    String?
  predictions               Prediction[]
  tournament                Tournament   @relation(fields: [tournamentId], references: [id])
  tournamentId              String
  scores                    Score[]

  @@unique([tournamentId, year], name: "tournamentYearId")
}

model Prediction {
  id                                  String         @id @default(uuid())
  createdAt                           DateTime       @default(now())
  user                                User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                              String
  tournamentYear                      TournamentYear @relation(fields: [tournamentYearId], references: [id])
  tournamentYearId                    String
  predictionFirstQuarterSemiFinalist  String
  predictionSecondQuarterSemiFinalist String
  predictionThirdQuarterSemiFinalist  String
  predictionFourthQuarterSemiFinalist String
  predictionTopHalfFinalist           String
  predictionBottomHalfFinalist        String
  predictionWinner                    String
  scores                              Score[]

  @@unique([userId, tournamentYearId], name: "userTournamentYearId")
}

model Score {
  id               String         @id @default(uuid())
  prediction       Prediction     @relation(fields: [predictionId], references: [id], onDelete: Cascade)
  predictionId     String
  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String
  tournamentYear   TournamentYear @relation(fields: [tournamentYearId], references: [id])
  tournamentYearId String
  score            Int

  @@unique([userId, tournamentYearId], name: "userTournamentYearId")
}

model Ranking {
  id                  String @id @default(uuid())
  user                User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId              String @unique
  totalScore          Int
  numberOfPredictions Int
  rank                Int
}
